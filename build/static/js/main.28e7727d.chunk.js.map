{"version":3,"sources":["Netflixfirebase/Dragndropsresume.jsx","Netflixfirebase/Mainroutes.jsx","index.js"],"names":["Dragndropsresume","makeStyles","root","paddingTop","backgroundColor","result","voucher_codes","generate","length","count","charset","console","log","ReactDOM","render","document","getElementById"],"mappings":"uZA6EiBA,I,WC7DFC,YAAW,CACtBC,KAAK,CACDC,WAAW,GACXC,gBAAgB,a,gBCZlBC,EAAOC,IAAcC,SAAS,CAChCC,OAAQ,EACRC,MAAO,GACPC,QAASJ,IAAcI,QAAQ,gBAInCC,QAAQC,IAAIP,GACZQ,IAASC,OACT,cAAC,IAAD,UACA,4CAGAC,SAASC,eAAe,W","file":"static/js/main.28e7727d.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {Dialog,DialogTitle,DialogActions,DialogContent,Button } from \"@material-ui/core\";\r\nfunction Dragndropsresume(props) {\r\nconst[showmessage,setshowmessage]=useState(\"\");\r\nconst imagees=\"https://nmdl.libnet.info/images/events/nmdl/upload1.jpg\";\r\n  const {\r\n    acceptedFiles,\r\n    fileRejections,\r\n    getRootProps,\r\n    getInputProps\r\n  } = useDropzone({\r\n    accept: 'application/pdf,.doc,.docx,'\r\n  });\r\nconst acceptedFileItems = acceptedFiles.map(file => (\r\n    <p key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </p>\r\n  ));\r\n\r\n  const fileRejectionItems = fileRejections.map(({ file, errors }) => (\r\n    <p key={file.path}>Not Accepted--\r\n      {file.path} - {file.size} bytes\r\n      <p>\r\n        {errors.map(e => (\r\n          <p key={e.code}>{e.message}</p>\r\n        ))}\r\n      </p>\r\n    </p>\r\n  ));\r\nif(acceptedFileItems[0]){\r\n    const reader= new FileReader();\r\n    reader.readAsDataURL(acceptedFiles[0])\r\n    reader.onload=async(event)=>{\r\n    props.setdragdrop1(event.target.result)\r\n    }  \r\n}else if(!props.setdragdrop1){\r\n    setshowmessage(\"please select image\")\r\n }  \r\n// const changeimage=()=>{\r\n// if(imagee!==imagees){\r\n//     props.setdragdrop(imagee)\r\n//     props.setshow1()\r\n// }else{\r\n//     setshowmessage(\"please select image\")\r\n// }    \r\n// }\r\nreturn (\r\n<>\r\n<Dialog open={props.showresume} style={{backgroundColor:\"#061829\"}}><DialogTitle><img className='my-1 mx-1 rounded-circle' src={imagees}  alt=\"\" style ={{height:\"5%\",width:\"5%\",objectFit:\"cover\"}}/>Upload Resume</DialogTitle>\r\n<DialogContent dividers>\r\n<div className=\"my-5 mx-5 border border-light text-center\">\r\n    <section className=\"container\">\r\n      <div {...getRootProps({ className: 'dropzone' })}>\r\n        <input {...getInputProps()} />\r\n        <img className='my-1 mx-1 ' src={imagees}  alt=\"\" style ={{height:\"25%\",width:\"25%\",objectFit:\"cover\"}}/>\r\n        <p>Drag and drop a image here</p>\r\n        <p>or</p>\r\n        <em>(Only *.doc , *.docx and *.pdf file will be accepted)</em>\r\n        <Button className='bg-primary' onClick={()=>setshowmessage(\"\") } style={{color:\"black\",backgroundColor:\"primary\",borderRadius:5}}>Choose file</Button><br/>\r\n        <small>file choosen</small>\r\n      </div>\r\n      <aside>\r\n        <span>{acceptedFileItems}</span>\r\n        <span>{fileRejectionItems}</span>\r\n        <span>{showmessage}</span>\r\n      </aside>\r\n    </section>\r\n    </div>\r\n    </DialogContent>\r\n    <DialogActions>\r\n    <Button  color='primary' onClick={()=>props.setshow1resume()}>Upload</Button>\r\n    <Button  color='secondary' onClick={()=>props.setshow1resume()}>Cancel</Button>\r\n    </DialogActions>\r\n    </Dialog>\r\n    </>\r\n  );\r\n};export default Dragndropsresume;\r\n","import { Container } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport React, {  useState } from \"react\";\r\nimport { Route,Switch } from \"react-router-dom\";\r\nimport MainHeader from \"./MainHeader\";\r\nimport ViewsAllData from \"./ViewsAllData\";\r\nimport Appschool from './Appschool';\r\nimport Viewonedata from './Viewonedata';\r\nimport Editonestudent from './Editonestudent';\r\nimport Netflix from './Netflix';\r\nimport Aprime from './Aprime';\r\nimport Viewmovieinfo from './Viewmovieinfo';\r\nimport WatchNow from './WatchNow';\r\nimport Netlogin from './Netlogin';\r\nimport Netsignup1 from './Netsignup1';\r\n\r\nconst useStyle=makeStyles({\r\n    root:{\r\n        paddingTop:10,\r\n        backgroundColor:\"#011222\"\r\n    },\r\n})\r\nconst Mainroutes=()=>{\r\nconst classes=useStyle();\r\nconst [search,setsearch]=useState(\"\")\r\nconst [nametitle,setnametitle]=useState(\"hh\")\r\n//localStorage.setItem(\"login\",JSON.stringify({userLogin:false,token:\"\", email_id:\"\",}))\r\n// const [isloginTrue,setisloginTrue]=useState({\r\n//     userLogin:false,\r\n//     token:\"\",\r\n// })\r\n//const isloginTrue=JSON.parse(localStorage.getItem(\"login\"))\r\n//console.log(isloginTrue)\r\nconst getlocalstroagevalue=()=>{\r\n    const isloginTrue=JSON.parse(localStorage.getItem(\"login\"))\r\n    isloginTrue?console.log(\"table hai\") :localStorage.setItem(\"login\",JSON.stringify({userLogin:false,token:\"\", email_id:\"\",}))\r\n    \r\n}\r\nconst inputevent=(e)=>{\r\n    setsearch(e.target.value);\r\n}\r\nconst blanktextandselect=(e)=>{\r\n    setsearch(\"\");\r\n}\r\nreturn ( \r\n<>\r\n<Container className={classes.root}>\r\n<MainHeader inputevent={inputevent} search={search} blanktextandselect={blanktextandselect} nametitle={nametitle} />\r\n<Switch>\r\n<Route exact path='/' render={()=>{getlocalstroagevalue();const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));setnametitle(isloginTrue.email_id);return(isloginTrue&&isloginTrue.userLogin?<Netflix search={search}/>:<Netlogin/>)}}/>\r\n<Route exact path='/home' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));setnametitle(isloginTrue.email_id);return(isloginTrue&&isloginTrue.userLogin?<Netflix search={search}/>:<Netlogin/>)}}/>\r\n<Route exact path='/viewsalldata' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<ViewsAllData search1={search} search={search}/>:<Netlogin/>)}}/>\r\n<Route exact path='/appschool' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<Appschool/>:<Netlogin/>)}}/>\r\n<Route exact path='/aprime/view/:list' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<Aprime search={search}/>:<Netlogin/>)}}/>\r\n<Route exact path='/viewmovieinfo/view/:list' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<Viewmovieinfo/>:<Netlogin/>)}}/>\r\n<Route exact path='/watchNow' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<WatchNow/>:<Netlogin/>)}}/>\r\n<Route exact path='/Viewonedata/view/:id' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<Viewonedata/>:<Netlogin/>)}}/>\r\n<Route exact path='/editonestudent/edit/:id/:time' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));return(isloginTrue&&isloginTrue.userLogin?<Editonestudent/>:<Netlogin/>)}}/>\r\n<Route exact path='/login' render={()=>{const isloginTrue=JSON.parse(localStorage.getItem(\"login\"));setnametitle(\"\");return(<Netlogin/>)}}/>\r\n<Route exact path='/netsignup1' render={()=><Netsignup1/>}/>\r\n</Switch>\r\n</Container>\r\n </>\r\n );\r\n };export default Mainroutes;\r\n","import \"../node_modules/bootstrap/dist/css/bootstrap.rtl.min.css\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap-grid.css\";\r\nimport React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport Mainroutes from './Netflixfirebase/Mainroutes';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport voucher_codes from 'voucher-code-generator';\r\nconst result=voucher_codes.generate({\r\n    length: 5,\r\n    count: 10,\r\n    charset: voucher_codes.charset(\"alphabetic\")\r\n   \r\n});\r\n\r\nconsole.log(result);\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<h1>dgfgfdgf</h1>\r\n\r\n</BrowserRouter>,\r\ndocument.getElementById(\"root\"));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}